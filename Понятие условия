//1)	Проверьте истинность утверждения "Число является положительным"
//Напишите функцию с именем isNumberPositive, которая принимает число num в качестве аргумента и возвращает true, если число num положительное, и false, в обратном случае.

function isNumberPositive(num){
return num > 0 ? true : false;
}
//2)	Проверьте истинность утверждения "Число является нечётным"
//Напишите функцию с именем isOdd, которая принимает целое число num в качестве аргумента и возвращает true, если число num нечётное, и false, в противном случае.
function isOdd(num){
  return num % 2 === 0 ? false : true;}

//3)	Проверьте истинность утверждения "Число является чётным"
//Напишите функцию с именем isEven, которая принимает целое число num в качестве аргумента и возвращает true, если число num чётное, и false, в противном случае.
function isEven(num){
return num % 2 === 0 ? true : false;   }


//4)	Проверьте истинность утверждения "Оба неравенства a > 2 и b <= 3 выполняются"
//question
//Напишите функцию с именем inequalitiesAreFulfilled, которая принимает два целых числа a, b в качестве аргументов и возвращает true, если выполняются оба неравенства a > 2 и b <= 3, и false, в противном случае.
function inequalitiesAreFulfilled(a, b){
  return a > 2 && b <= 3 ? true : false;}

//5)	Для данных чисел a, b, c проверьте истинность выполнения двойного неравенства a < b < c"
//Напишите функцию с именем inequalitiesAreFulfilled, которая принимает три целых числа a, b, c в качестве аргументов и возвращает true, если выполняется двойное неравенство a < b < c, и false, в противном случае.

function inequalitiesAreFulfilled(a, b, c){
  return a < b && b < c ? true : false;}

//6)	Проверьте истинность утверждения "Выполняется хотя бы одно из неравенств a >= 0 или b < - 2"
//Напишите функцию с именем inequalitiesAreFulfilled, которая принимает два целых числа a, b в качестве аргументов и возвращает true, если выполняется хотя бы одно из неравенств a >= 0 или b < -2, и false, в противном случае.

function inequalitiesAreFulfilled(a, b){
    return a >= 0 || b < -2 ? true : false;    }

//7)	Для данных чисел a, b, c проверьте истинность утверждения: "Число b находится между числами a и c"
//Напишите функцию с именем isPropositionTrue, которая принимает три целых числа a, b, c в качестве аргументов и возвращает true, если утверждение "Число b находится между числами a и c" истинно, и false, в противном случае.

function isPropositionTrue(a, b, c){
  return (a < c && a < b && b < c) || (a > c && a > b && b > c) ? true : false     }

//8)	Проверьте истинность утверждения "Оба числа a и b - четные"
//Напишите функцию с именем areNumbersEven, которая принимает два целых числа a, b в качестве аргументов и возвращает true, если оба числа a и b четные, и false, в противном случае.

function areNumbersEven(a, b){
  return (a % 2 === 0) && (b % 2 === 0)  ? true : false;     }

//9)	Проверьте истинность утверждения "Хотя бы одно из чисел a или b является нечётным"
//Напишите функцию с именем atLeastOneIsOdd, которая принимает два целых числа a, b в качестве аргументов и возвращает true, если хотя бы одно из чисел a или b является нечётным, и false, в противном случае.

function atLeastOneIsOdd(a, b){
  return (a % 2 !== 0) || (b % 2 !== 0)  ? true : false     }

//10)	Проверьте истинность утверждения "Числа a и b - нечетные"
//Напишите функцию с именем areNumbersOdd, которая принимает два целых числа a, b в качестве аргументов и возвращает true, если оба числа a и b нечетные, и false, в противном случае.

function areNumbersOdd(a, b){
  return (a % 2 !== 0) && (b % 2 !== 0)  ? true : false         }

//11)	Проверьте истинность утверждения "Хотя бы одно из чисел a или b является чётным"
//Напишите функцию с именем atLeastOneIsEven, которая принимает два целых числа a, b в качестве аргументов и возвращает true, если хотя бы одно из чисел a или b является чётным, и false, в противном случае.

function atLeastOneIsEven(a, b){
  return (a % 2 === 0) || (b % 2 === 0)  ? true : false; }

//12)	Для данных двух чисел проверьте истинность утверждения "Только одно из чисел является нечётным"
//Напишите функцию с именем exactlyOneIsOdd, которая принимает два целых числа a, b в качестве аргументов и возвращает true, если только одно из чисел a или b является нечётным, и false, в противном случае.

function exactlyOneIsOdd(a, b){
  return ((a % 2 !== 0) && (b % 2 === 0)) || ((a % 2 === 0) && (b % 2 !== 0))  ? true : false; 
}

//13)	Проверьте истинность утверждения "Только одно из трех данных чисел является чётным"
//Напишите функцию с именем exactlyOneIsEven, которая принимает три целых числа a, b, c в качестве аргументов и возвращает true, если только одно из чисел a, b или c является чётным, и false, в противном случае.

function exactlyOneIsEven(a, b, c){
  return ((a % 2 === 0) && (b % 2 !== 0) && (c % 2 !== 0)) || ((a % 2 !== 0) && (b % 2 === 0) && (c % 2 !== 0)) || ((a % 2 !== 0) && (b % 2 !== 0) && (c % 2 === 0)) ? true : false; 
}

//14)	Для двух данных чисел проверьте истинность утверждения "Числа имеют одинаковую чётность"
//Напишите функцию с именем equalParity, которая принимает два целых числа a, b в качестве аргументов и возвращает true, если числа имеют одинаковую четность (оба чётные или оба нечётные) и false, в противном случае.

function equalParity(a, b){
  return ((a % 2 === 0) && (b % 2 === 0)) || ((a % 2 !== 0) && (b % 2 !== 0)) ? true : false; 
}
//15)	Проверьте истинность утверждения "Каждое из трех данных чисел является положительным"
//Напишите функцию с именем eachIsPositive, которая принимает три целых числа a, b, c в качестве аргументов и возвращает true, если все числа a, b, c являются положительными, и false - в противном случае.

function eachIsPositive(a, b, c){
  return (a > 0 && b > 0 && c > 0) ? true : false;     }

//16)	Проверьте истинность утверждения "Хотя бы одно из трех данных чисел является положительным"
//Напишите функцию с именем atLeastOneIsPositive, которая принимает три целых числа a, b, c в качестве аргументов и возвращает true, если хотя бы одно из трех чисел a, b, c являются положительными, и false - в противном случае.

function atLeastOneIsPositive(a, b, c){
  return (a > 0 || b > 0 || c > 0) ? true : false;      }

//17)	Проверьте истинность утверждения "Только одно из трех данных чисел является положительным"
//Напишите функцию с именем onlyOneIsPositive, которая принимает три целых числа a, b, c в качестве аргументов и возвращает true, если только одно из трех чисел a, b, c являются положительными, и false - в противном случае.

function onlyOneIsPositive(a, b, c){
  return (a > 0 && b <= 0 && c <= 0 ) || (a <= 0 && b > 0 && c <= 0) || (a <= 0 && b <= 0 && c > 0) ? true : false;}

//18)	Проверьте истинность утверждения "Два из трех данных чисел являются положительными"
//Напишите функцию с именем exactlyTwoArePositive, которая принимает три целых числа a, b, c в качестве аргументов и возвращает true, если ровно два из трех данных чисел являются положительными, и false - в противном случае.

function exactlyTwoArePositive(a, b, c){
    return (a > 0 && b > 0 && c <= 0 ) || (a <= 0 && b > 0 && c > 0) || (a > 0 && b <= 0 && c > 0) ? true : false;
}

//19)	Проверьте истинность утверждения "Данное число является двузначным четным числом"
//Напишите функцию с именем isTwoDigitEvenNumber, которая принимает положительное число num в качестве аргумента и возвращает true, если число num является двузначным четным числом, и false - в противном случае.

function isTwoDigitEvenNumber(num){
  return num >= 10 && num < 100 && num % 2 === 0 ? true : false;     }

//20)	Проверьте истинность утверждения "Данное число является трехзначным нечетным числом"
//Напишите функцию с именем isThreeDigitOddNumber, которая принимает положительное число num в качестве аргумента и возвращает true, если число num является трехзначным нечетным числом, и false - в противном случае.

function isThreeDigitOddNumber(num){
  return num >= 100 && num < 1000 && num % 2 !== 0 ? true : false   }

21)	Проверьте истинность утверждения "Среди трех данных чисел есть хотя бы два одинаковых числа".
Напишите функцию с именем atLeastOnePairOfEquals, которая принимает три целых числа a, b, c в качестве аргументов и возвращает true, если среди этих чисел есть хотя бы два одинаковых числа, и false - в противном случае.

function atLeastOnePairOfEquals(a, b, c){
  return a === b || a === c || b === c ? true : false   }

//22)	Проверьте истинность утверждения "Среди трех данных чисел есть хотя бы два противоположных по значению числа".
//Напишите функцию с именем atLeastOnePairOfOpposite, которая принимает три целых числа a, b, c в качестве аргументов и возвращает true, если среди этих чисел есть хотя бы два противоположных по значению числа, и false - в противном случае.

function atLeastOnePairOfOpposite(a, b, c){
  return a === -b || a === -c || b === -c   ? true : false   }

//23)	Проверьте истинность утверждения "Все цифры трехзначного числа различны".
//Напишите функцию с именем areAllDigitsDifferent, которая принимает положительное трехзначное число num в качестве аргумента и возвращает true, если все цифры этого числа различны, и false - в противном случае.
function areAllDigitsDifferent(num){
  let a = Math.trunc(num / 100);
  let b = Math.trunc((num / 10) % 10);
  let c= Math.trunc(num % 10);
  return a !== b && a !== c && b !== c  ? true : false   }


//24)	Проверьте истинность утверждения "Все цифры трехзначного числа упорядочены по возрастанию".
//Напишите функцию с именем areDigitsInAscendingOrder, которая принимает положительное трехзначное число num в качестве аргумента и возвращает true, если все цифры числа расположены в порядке возрастания, и false - в противном случае.

function areDigitsInAscendingOrder(num){
  let a = Math.trunc(num / 100);
  let b = Math.trunc((num / 10) % 10);
  let c = Math.trunc(num % 10);
  return a < b &&  b < c  ? true : false    }

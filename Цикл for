Цикл for

1.	Cумма чисел от n до m.
которая принимает два числа n, m и возвращает сумму чисел от n до m.

function sumFromNToM(n, m){
if (n > m) return 0; 
for (let i = n + 1; i <= m; i++){
  n = n + i; 
} return n
}

2.	Cумма чисел от n до m, кратных числу n

  if (n > m) return 0; 
  let k = n;
  for (let i = n + 1; i <= m; i++){
    n = i % k === 0 ? n + i : n;  
  } return n
  
}
3.	Сумма дробей
число n и возвращает сумму дробей, у которых в числителе 1, а в знаменателе - числа от 1 до n

function sumOfFractionals(n){
  let sum = 0;
  for (let i = 1; i <= n; i++){
    sum += (1 / i); 
  } return +sum.toFixed(2)
}

4.	Найдите значение дроби
Дано число n > 0. Найдите значение дроби:
 
function fractional(n){
  let sum = 0;
  let prod = 1;
  for (let i = 1; i <= n; i++){
    sum += i;
    prod *= i;  
  } return +(sum / prod).toFixed(3);
}


5.	Количество делителей числа.
Найдите количество делителей этого числа
function numberOfDividers(n){
  let cnt = 0;
  for (let i = 1; i <= n; i++){
    cnt = n % i === 0 ? cnt + 1 : cnt;
  } return cnt;
}

6.	Создайте массив делителей

function dividers(n){
  let arr = [];
  for (let i = 1; i <= n; i++){
    if (n % i === 0) {
      arr[arr.length] = i;
    }
  } return arr
}

7.	Возведение в степень путем многократного умножения
Определите, является ли данное число n простым. Т.е число делителей = 2.

function isPrime(n){
  let cnt = 0;
  for (let i = 1; i <= n; i++){
    cnt = n % i === 0 ? cnt + 1 : cnt;
  } return cnt === 2;

}

8.	Последовательность Фибоначчи
Не пользуясь операцией возведения в степень, возвести число a в степень n.

function power(a, n){
  let prod = 1;
  for (let i = 1; i <= n; i++){
    prod *= a;  
  } return prod;
}


Числа Фибоначчи - последовательность, в которой первые два числа равны 0 и 1, а каждое последующее число равно сумме двух предыдущих чисел: 0, 1, 1, 2, 3, 5, ..

function fibonacciNumbers(n){
  let arr = [0, 1,];
  for (let i = 2; i < n; i++){
    arr.push(arr[i-1]+arr[i-2]);  
  } return arr;
}
